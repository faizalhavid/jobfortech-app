Form(
          key: formKey,
          child: AppSafeArea(
            safearea: resSafeArea,
            spacing: 30,
            children: [
              Text(
                'Account',
                style: AppTitleHeader,
              ),
              Row(
                mainAxisSize: MainAxisSize.max,
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
            
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.end,
                    children: [
                      AppButton(
                        backgroundColor: AppColor.blue,
                        height: 35,
                        width: 80,
                        child: Text(
                          'Upload Photo',
                          style: AppBasicStyle(
                              fontSize: 12,
                              fontColor: AppColor.white,
                              fontWeight: FontWeight.w500),
                        ),
                        spacing: 0,
                        onPressed: () async {
                          final pickImage = await controller.getImage();
                          print(pickImage);
                        },
                      ),
                      const SizedBox(
                        height: 10,
                      ),
                      Container(
                        width: 150,
                        child: FutureBuilder(
                            future: userRepo.getUser(),
                            builder: (context, snapshot) {
                              if (snapshot.connectionState ==
                                  ConnectionState.done) {
                                final user = snapshot.data as User;

                                return Text(
                                  user.profile!.description! == ''
                                      ? 'No description'
                                      : user.profile!.description!,
                                  style: AppBasicStyle(
                                      fontSize: 16,
                                      fontColor: AppColor.blue,
                                      fontWeight: FontWeight.w600),
                                  textAlign: TextAlign.end,
                                );
                              } else {
                                return Center(
                                  child: AppShimmer(
                                    child: Container(
                                      height: 40,
                                      width: Get.width,
                                      decoration: BoxDecoration(
                                        borderRadius: BorderRadius.circular(10),
                                        color: AppColor.smoke,
                                      ),
                                    ),
                                  ),
                                );
                              }
                            }),
                      )
                    ],
                  )
                ],
              ),
              FutureBuilder(
                future: userRepo.getUser(),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.done) {
                    final user = snapshot.data as User;
                    final name =
                        '${user.profile!.firstName} ${user.profile!.lastName}';
                    controller.name.text = name;
                    return AppTextInput(
                      controller: controller.name,
                      onChanged: (value) {
                        controller.name.text = value;
                      },
                      labelText: 'Full Name',
                      hintText: 'Enter address',
                      errorText: 'Invalid address',
                      keyboardType: TextInputType.streetAddress,
                    );
                  } else {
                    return Center(
                      child: AppShimmer(
                        child: Container(
                          height: 40,
                          width: Get.width,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(10),
                            color: AppColor.smoke,
                          ),
                        ),
                      ),
                    );
                  }
                },
              ),
              FutureBuilder(
                future: userRepo.getUser(),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.done) {
                    final user = snapshot.data as User;
                    final items = user.profile?.skills
                            ?.map((skill) => skill.toString())
                            .toList() ??
                        ['No skill'];
                    if (items.isEmpty) {
                      items.add('No skill');
                    }
                    return AppDropDown(
                      label: 'Job Role',
                      items: items,
                      controller: controller.jobRoles,
                      errorText: 'Invalid job role',
                    );
                  } else {
                    return Center(
                      child: AppShimmer(
                        child: Container(
                          height: 40,
                          width: Get.width,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(10),
                            color: AppColor.smoke,
                          ),
                        ),
                      ),
                    );
                  }
                },
              ),
              Text(
                'Contact',
                style: AppTitleHeader,
              ),
              FutureBuilder(
                future: userRepo.getUser(),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.done) {
                    return AppTextInput(
                      controller: controller.phoneNumber,
                      onChanged: (value) {
                        controller.phoneNumber.text = value;
                      },
                      labelText: 'Phone Number',
                      hintText: 'Enter Phone number',
                      errorText: 'Invalid phone number',
                      keyboardType: TextInputType.phone,
                    );
                  } else {
                    return Center(
                      child: AppShimmer(
                        child: Container(
                          height: 40,
                          width: Get.width,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(10),
                            color: AppColor.smoke,
                          ),
                        ),
                      ),
                    );
                  }
                },
              ),
              FutureBuilder(
                future: userRepo.getUser(),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.done) {
                    return AppTextInput(
                      controller: controller.email,
                      onChanged: (value) {
                        controller.email.text = value;
                      },
                      labelText: 'Email',
                      hintText: 'Enter email address',
                      errorText: 'Invalid email address',
                      keyboardType: TextInputType.emailAddress,
                    );
                  } else {
                    return Center(
                      child: AppShimmer(
                        child: Container(
                          height: 40,
                          width: Get.width,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(10),
                            color: AppColor.smoke,
                          ),
                        ),
                      ),
                    );
                  }
                },
              ),
              FutureBuilder(
                future: userRepo.getUser(),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.done) {
                    return AppTextInput(
                      controller: controller.birthDate,
                      onTap: () {
                        showDate(context, controller.birthDate);
                      },
                      readOnly: true,
                      labelText: 'Birth Date',
                      hintText: 'Enter birth date',
                      errorText: 'Invalid birth date',
                      suffix: IconButton(
                        onPressed: () {
                          showDate(context, controller.birthDate);
                        },
                        icon: const Icon(Icons.calendar_today),
                      ),
                      keyboardType: TextInputType.datetime,
                    );
                  } else {
                    return Center(
                      child: AppShimmer(
                        child: Container(
                          height: 40,
                          width: Get.width,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(10),
                            color: AppColor.smoke,
                          ),
                        ),
                      ),
                    );
                  }
                },
              ),
              FutureBuilder(
                future: userRepo.getUser(),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.done) {
                    return AppTextInput(
                      controller: controller.address,
                      onChanged: (value) {
                        controller.address.text = value;
                      },
                      labelText: 'Address',
                      hintText: 'Enter address',
                      errorText: 'Invalid address',
                      maxLines: 3,
                      keyboardType: TextInputType.streetAddress,
                    );
                  } else {
                    return Center(
                      child: AppShimmer(
                        child: Container(
                          height: 40,
                          width: Get.width,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(10),
                            color: AppColor.smoke,
                          ),
                        ),
                      ),
                    );
                  }
                },
              ),
              FutureBuilder(
                future: controller.getJobRole(),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.done) {
                    return AppDropDown(
                      label: 'Country',
                      items: countryList,
                      controller: controller.country,
                      errorText: 'Invalid country',
                    );
                  } else {
                    return Center(
                      child: AppShimmer(
                        child: Container(
                          height: 40,
                          width: Get.width,
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(10),
                            color: AppColor.smoke,
                          ),
                        ),
                      ),
                    );
                  }
                },
              ),
              Text(
                'Link Account',
                style: AppTitleHeader,
              ),
              InkWell(
                onTap: () {},
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Row(
                      children: [
                        AppIcon(
                            svgPath: 'assets/svgs/social-media-logo.svg',
                            size: 25),
                        SizedBox(width: 8),
                        Text(
                          'Linked In',
                          style: TextStyle(
                              fontSize: 16, fontWeight: FontWeight.w400),
                        ),
                      ],
                    ),
                    Row(
                      children: [
                        Text(
                          '@username_linkedin',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w400,
                            color: AppColor.osean,
                            decoration: TextDecoration.underline,
                            fontStyle: FontStyle.italic,
                          ),
                        ),
                        SizedBox(width: 5),
                        AppIcon(
                            svgPath: 'assets/svgs/link-minimalistic.svg',
                            size: 18),
                      ],
                    ),
                  ],
                ),
              ),
              InkWell(
                onTap: () {},
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Row(
                      children: [
                        Image.asset(
                          'assets/images/github.png',
                          width: 25,
                          height: 25,
                        ),
                        SizedBox(width: 8),
                        Text(
                          'Git Hub',
                          style: TextStyle(
                              fontSize: 16, fontWeight: FontWeight.w400),
                        ),
                      ],
                    ),
                    Row(
                      children: [
                        Text(
                          '@username_github',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w400,
                            color: AppColor.osean,
                            decoration: TextDecoration.underline,
                            fontStyle: FontStyle.italic,
                          ),
                        ),
                        SizedBox(width: 5),
                        AppIcon(
                            svgPath: 'assets/svgs/link-minimalistic.svg',
                            size: 18),
                      ],
                    ),
                  ],
                ),
              ),
              InkWell(
                onTap: () {},
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    Text(
                      'Add Links',
                      style: TextStyle(
                          fontSize: 16,
                          color: AppColor.osean,
                          fontWeight: FontWeight.w400),
                      textAlign: TextAlign.end,
                    ),
                    SizedBox(width: 5),
                    AppIcon(svgPath: 'assets/svgs/button-tambah.svg', size: 18)
                  ],
                ),
              ),
              Text(
                'CV',
                style: AppTitleHeader,
              ),
              AppButton(
                  type: 'outline',
                  outlineColor: AppColor.darkBlue,
                  backgroundColor: AppColor.white,
                  child: Text(
                    'Upload CV',
                    style: AppBasicStyle(fontWeight: FontWeight.w600),
                  ),
                  onPressed: () {}),
              Text(
                'CV must be PDF format and no larger than 10MB.',
                style: AppBasicStyle(
                    fontColor: AppColor.grey,
                    fontWeight: FontWeight.w500,
                    fontSize: 12),
              ),
              const SizedBox(height: 20),
              SizedBox(
                  width: double.infinity,
                  child: AppButton(
                      child: Text(
                        'Save',
                        style: AppBasicStyle(
                            fontColor: AppColor.white,
                            fontWeight: FontWeight.w700),
                      ),
                      onPressed: () {
                        controller.editProfileHandling(formKey);
                      })),
            ],
          ),
        )